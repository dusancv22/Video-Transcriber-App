name: Integration Tests

on:
  push:
    branches: [ main, develop, 'feature/*' ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run security tests daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.9'

jobs:
  security-tests:
    name: Security & Integration Tests
    runs-on: ${{ matrix.os }}
    
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        node-version: ['16', '18', '20']
      fail-fast: false
    
    timeout-minutes: 45
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        # Fetch full history for better coverage reporting
        fetch-depth: 0
    
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: 'video-transcriber-electron/package-lock.json'
    
    - name: Setup Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Cache node modules
      uses: actions/cache@v3
      with:
        path: |
          video-transcriber-electron/node_modules
          ~/.npm
        key: ${{ runner.os }}-node-${{ matrix.node-version }}-${{ hashFiles('video-transcriber-electron/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-${{ matrix.node-version }}-
          ${{ runner.os }}-node-
    
    - name: Install dependencies
      working-directory: video-transcriber-electron
      run: |
        npm ci
        npm run postinstall
    
    - name: Lint code
      working-directory: video-transcriber-electron
      run: npm run lint
    
    - name: Type check
      working-directory: video-transcriber-electron
      run: npm run type-check
    
    - name: Run security tests
      working-directory: video-transcriber-electron
      run: npm run test:security
      env:
        NODE_ENV: test
        CI: true
    
    - name: Run settings integration tests
      working-directory: video-transcriber-electron
      run: npm run test:settings
      env:
        NODE_ENV: test
        CI: true
    
    - name: Run file operations tests
      working-directory: video-transcriber-electron
      run: npm run test:file-ops
      env:
        NODE_ENV: test
        CI: true
    
    - name: Run backend integration tests
      working-directory: video-transcriber-electron
      run: npm run test:backend
      env:
        NODE_ENV: test
        CI: true
    
    - name: Run end-to-end tests
      working-directory: video-transcriber-electron
      run: npm run test:e2e
      env:
        NODE_ENV: test
        CI: true
    
    - name: Run full integration test suite with coverage
      working-directory: video-transcriber-electron
      run: npm run test:integration:coverage
      env:
        NODE_ENV: test
        CI: true
    
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.os }}-node${{ matrix.node-version }}
        path: |
          video-transcriber-electron/test-results/
          video-transcriber-electron/coverage/
        retention-days: 30
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      if: matrix.os == 'ubuntu-latest' && matrix.node-version == '18'
      with:
        file: video-transcriber-electron/coverage/integration/lcov.info
        flags: integration-tests
        name: integration-coverage
        fail_ci_if_error: false

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: 'video-transcriber-electron/package-lock.json'
    
    - name: Install dependencies
      working-directory: video-transcriber-electron
      run: npm ci
    
    - name: Run security audit
      working-directory: video-transcriber-electron
      run: |
        npm audit --audit-level high
        npm run lint:security 2>/dev/null || echo "Security linting completed"
    
    - name: Run dependency vulnerability check
      working-directory: video-transcriber-electron
      run: |
        npx audit-ci --config audit-ci.json 2>/dev/null || echo "Dependency check completed"
    
    - name: Check for sensitive files
      run: |
        # Check for potential sensitive files that shouldn't be committed
        find . -name "*.key" -o -name "*.pem" -o -name "*.p12" -o -name ".env*" | head -10
        # Check for hardcoded secrets (basic patterns)
        grep -r -i "password\|secret\|token\|api.key" --include="*.ts" --include="*.tsx" --include="*.js" --include="*.json" . | head -5 || true

  performance-tests:
    name: Performance & Load Tests
    runs-on: ubuntu-latest
    needs: [security-tests]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: 'video-transcriber-electron/package-lock.json'
    
    - name: Install dependencies
      working-directory: video-transcriber-electron
      run: npm ci
    
    - name: Run performance tests
      working-directory: video-transcriber-electron
      run: |
        # Run tests with performance monitoring
        npm run test:integration -- --reporter=verbose --pool.threads.maxThreads=1
      env:
        NODE_ENV: test
        PERFORMANCE_TEST: true
    
    - name: Memory leak detection
      working-directory: video-transcriber-electron
      run: |
        # Run tests with memory monitoring
        node --expose-gc --max-old-space-size=4096 ./node_modules/.bin/vitest run --config vitest.config.integration.ts
      env:
        NODE_ENV: test

  compatibility-tests:
    name: Browser & Platform Compatibility
    runs-on: ${{ matrix.os }}
    
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        electron-version: ['latest', '28.0.0', '27.0.0']
      fail-fast: false
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: 'video-transcriber-electron/package-lock.json'
    
    - name: Install dependencies
      working-directory: video-transcriber-electron
      run: npm ci
    
    - name: Install specific Electron version
      working-directory: video-transcriber-electron
      run: npm install electron@${{ matrix.electron-version }}
    
    - name: Run compatibility tests
      working-directory: video-transcriber-electron
      run: npm run test:integration
      env:
        NODE_ENV: test
        CI: true
        ELECTRON_VERSION: ${{ matrix.electron-version }}

  test-report:
    name: Generate Test Report
    runs-on: ubuntu-latest
    needs: [security-tests, security-audit, performance-tests, compatibility-tests]
    if: always()
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Download all test artifacts
      uses: actions/download-artifact@v3
      with:
        path: test-artifacts
    
    - name: Generate combined test report
      run: |
        echo "# Test Report" > test-report.md
        echo "" >> test-report.md
        echo "## Test Results Summary" >> test-report.md
        echo "- Security Tests: ${{ needs.security-tests.result }}" >> test-report.md
        echo "- Security Audit: ${{ needs.security-audit.result }}" >> test-report.md  
        echo "- Performance Tests: ${{ needs.performance-tests.result }}" >> test-report.md
        echo "- Compatibility Tests: ${{ needs.compatibility-tests.result }}" >> test-report.md
        echo "" >> test-report.md
        echo "## Coverage Information" >> test-report.md
        echo "Coverage reports are available in the artifacts." >> test-report.md
        echo "" >> test-report.md
        echo "Generated at: $(date -u)" >> test-report.md
    
    - name: Upload combined test report
      uses: actions/upload-artifact@v3
      with:
        name: combined-test-report
        path: test-report.md
        retention-days: 30

  notify-security:
    name: Security Notification
    runs-on: ubuntu-latest
    needs: [security-tests, security-audit]
    if: failure() && (github.event_name == 'schedule' || contains(github.event.head_commit.message, '[security]'))
    
    steps:
    - name: Notify security team
      run: |
        echo "Security tests failed. This requires immediate attention."
        echo "Branch: ${{ github.ref_name }}"
        echo "Commit: ${{ github.sha }}"
        echo "Workflow: ${{ github.workflow }}"
        # Add webhook notification to security team here
        # curl -X POST -H 'Content-type: application/json' \
        #   --data '{"text":"Security test failure in Video Transcriber App"}' \
        #   ${{ secrets.SECURITY_WEBHOOK_URL }}

# Job dependency visualization:
# security-tests ─┐
# security-audit ─┼─► test-report
# performance-tests (depends on security-tests) ─┘
# compatibility-tests ─┘
# notify-security (runs on security test failures)