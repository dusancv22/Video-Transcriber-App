"use strict";
const electron = require("electron");
const electronAPI = {
  app: {
    getVersion: () => electron.ipcRenderer.invoke("app:getVersion"),
    getPlatform: () => electron.ipcRenderer.invoke("app:getPlatform")
  },
  dialog: {
    showOpenDialog: (options) => electron.ipcRenderer.invoke("dialog:showOpenDialog", options),
    showSaveDialog: (options) => electron.ipcRenderer.invoke("dialog:showSaveDialog", options)
  },
  shell: {
    openExternal: (url) => electron.ipcRenderer.invoke("shell:openExternal", url),
    showItemInFolder: (fullPath) => electron.ipcRenderer.invoke("shell:showItemInFolder", fullPath)
  },
  notification: {
    show: (title, body, options) => {
      if (window.Notification && Notification.permission === "granted") {
        new Notification(title, { body, ...options });
      } else if (window.Notification && Notification.permission !== "denied") {
        Notification.requestPermission().then((permission) => {
          if (permission === "granted") {
            new Notification(title, { body, ...options });
          }
        });
      }
    }
  }
};
if (process.contextIsolated) {
  try {
    electron.contextBridge.exposeInMainWorld("electronAPI", electronAPI);
  } catch (error) {
    console.error("Failed to expose electronAPI:", error);
  }
} else {
  window.electronAPI = electronAPI;
}
electron.contextBridge.exposeInMainWorld("environment", {
  isElectron: true,
  isDev: process.env.NODE_ENV === "development",
  platform: process.platform
});
delete window.require;
delete window.exports;
delete window.module;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJlbG9hZC5qcyIsInNvdXJjZXMiOlsiLi4vLi4vZWxlY3Ryb24vcHJlbG9hZC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjb250ZXh0QnJpZGdlLCBpcGNSZW5kZXJlciB9IGZyb20gJ2VsZWN0cm9uJ1xyXG5cclxuLy8gRGVmaW5lIHRoZSBBUEkgdGhhdCB3aWxsIGJlIGV4cG9zZWQgdG8gdGhlIHJlbmRlcmVyIHByb2Nlc3NcclxuZXhwb3J0IGludGVyZmFjZSBFbGVjdHJvbkFQSSB7XHJcbiAgLy8gQXBwIGluZm9ybWF0aW9uXHJcbiAgYXBwOiB7XHJcbiAgICBnZXRWZXJzaW9uOiAoKSA9PiBQcm9taXNlPHN0cmluZz5cclxuICAgIGdldFBsYXRmb3JtOiAoKSA9PiBQcm9taXNlPHN0cmluZz5cclxuICB9XHJcblxyXG4gIC8vIEZpbGUgc3lzdGVtIGRpYWxvZ3NcclxuICBkaWFsb2c6IHtcclxuICAgIHNob3dPcGVuRGlhbG9nOiAob3B0aW9uczogRWxlY3Ryb24uT3BlbkRpYWxvZ09wdGlvbnMpID0+IFByb21pc2U8RWxlY3Ryb24uT3BlbkRpYWxvZ1JldHVyblZhbHVlPlxyXG4gICAgc2hvd1NhdmVEaWFsb2c6IChvcHRpb25zOiBFbGVjdHJvbi5TYXZlRGlhbG9nT3B0aW9ucykgPT4gUHJvbWlzZTxFbGVjdHJvbi5TYXZlRGlhbG9nUmV0dXJuVmFsdWU+XHJcbiAgfVxyXG5cclxuICAvLyBTaGVsbCBvcGVyYXRpb25zXHJcbiAgc2hlbGw6IHtcclxuICAgIG9wZW5FeHRlcm5hbDogKHVybDogc3RyaW5nKSA9PiBQcm9taXNlPHZvaWQ+XHJcbiAgICBzaG93SXRlbUluRm9sZGVyOiAoZnVsbFBhdGg6IHN0cmluZykgPT4gUHJvbWlzZTx2b2lkPlxyXG4gIH1cclxuXHJcbiAgLy8gU3lzdGVtIG5vdGlmaWNhdGlvbnNcclxuICBub3RpZmljYXRpb246IHtcclxuICAgIHNob3c6ICh0aXRsZTogc3RyaW5nLCBib2R5OiBzdHJpbmcsIG9wdGlvbnM/OiBOb3RpZmljYXRpb25PcHRpb25zKSA9PiB2b2lkXHJcbiAgfVxyXG59XHJcblxyXG4vLyBFeHBvc2UgcHJvdGVjdGVkIG1ldGhvZHMgdGhhdCBhbGxvdyB0aGUgcmVuZGVyZXIgcHJvY2VzcyB0byB1c2VcclxuLy8gdGhlIGlwY1JlbmRlcmVyIHdpdGhvdXQgZXhwb3NpbmcgdGhlIGVudGlyZSBvYmplY3RcclxuY29uc3QgZWxlY3Ryb25BUEk6IEVsZWN0cm9uQVBJID0ge1xyXG4gIGFwcDoge1xyXG4gICAgZ2V0VmVyc2lvbjogKCkgPT4gaXBjUmVuZGVyZXIuaW52b2tlKCdhcHA6Z2V0VmVyc2lvbicpLFxyXG4gICAgZ2V0UGxhdGZvcm06ICgpID0+IGlwY1JlbmRlcmVyLmludm9rZSgnYXBwOmdldFBsYXRmb3JtJylcclxuICB9LFxyXG5cclxuICBkaWFsb2c6IHtcclxuICAgIHNob3dPcGVuRGlhbG9nOiAob3B0aW9ucykgPT4gaXBjUmVuZGVyZXIuaW52b2tlKCdkaWFsb2c6c2hvd09wZW5EaWFsb2cnLCBvcHRpb25zKSxcclxuICAgIHNob3dTYXZlRGlhbG9nOiAob3B0aW9ucykgPT4gaXBjUmVuZGVyZXIuaW52b2tlKCdkaWFsb2c6c2hvd1NhdmVEaWFsb2cnLCBvcHRpb25zKVxyXG4gIH0sXHJcblxyXG4gIHNoZWxsOiB7XHJcbiAgICBvcGVuRXh0ZXJuYWw6ICh1cmwpID0+IGlwY1JlbmRlcmVyLmludm9rZSgnc2hlbGw6b3BlbkV4dGVybmFsJywgdXJsKSxcclxuICAgIHNob3dJdGVtSW5Gb2xkZXI6IChmdWxsUGF0aCkgPT4gaXBjUmVuZGVyZXIuaW52b2tlKCdzaGVsbDpzaG93SXRlbUluRm9sZGVyJywgZnVsbFBhdGgpXHJcbiAgfSxcclxuXHJcbiAgbm90aWZpY2F0aW9uOiB7XHJcbiAgICBzaG93OiAodGl0bGU6IHN0cmluZywgYm9keTogc3RyaW5nLCBvcHRpb25zPzogTm90aWZpY2F0aW9uT3B0aW9ucykgPT4ge1xyXG4gICAgICBpZiAod2luZG93Lk5vdGlmaWNhdGlvbiAmJiBOb3RpZmljYXRpb24ucGVybWlzc2lvbiA9PT0gJ2dyYW50ZWQnKSB7XHJcbiAgICAgICAgbmV3IE5vdGlmaWNhdGlvbih0aXRsZSwgeyBib2R5LCAuLi5vcHRpb25zIH0pXHJcbiAgICAgIH0gZWxzZSBpZiAod2luZG93Lk5vdGlmaWNhdGlvbiAmJiBOb3RpZmljYXRpb24ucGVybWlzc2lvbiAhPT0gJ2RlbmllZCcpIHtcclxuICAgICAgICBOb3RpZmljYXRpb24ucmVxdWVzdFBlcm1pc3Npb24oKS50aGVuKHBlcm1pc3Npb24gPT4ge1xyXG4gICAgICAgICAgaWYgKHBlcm1pc3Npb24gPT09ICdncmFudGVkJykge1xyXG4gICAgICAgICAgICBuZXcgTm90aWZpY2F0aW9uKHRpdGxlLCB7IGJvZHksIC4uLm9wdGlvbnMgfSlcclxuICAgICAgICAgIH1cclxuICAgICAgICB9KVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG4vLyBVc2UgYGNvbnRleHRCcmlkZ2VgIEFQSXMgdG8gZXhwb3NlIEVsZWN0cm9uIEFQSXMgdG9cclxuLy8gcmVuZGVyZXIgb25seSBpZiBjb250ZXh0IGlzb2xhdGlvbiBpcyBlbmFibGVkLCBvdGhlcndpc2VcclxuLy8ganVzdCBhZGQgdG8gdGhlIERPTSBnbG9iYWwuXHJcbmlmIChwcm9jZXNzLmNvbnRleHRJc29sYXRlZCkge1xyXG4gIHRyeSB7XHJcbiAgICBjb250ZXh0QnJpZGdlLmV4cG9zZUluTWFpbldvcmxkKCdlbGVjdHJvbkFQSScsIGVsZWN0cm9uQVBJKVxyXG4gIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICBjb25zb2xlLmVycm9yKCdGYWlsZWQgdG8gZXhwb3NlIGVsZWN0cm9uQVBJOicsIGVycm9yKVxyXG4gIH1cclxufSBlbHNlIHtcclxuICAvLyBAdHMtaWdub3JlIChkZWZpbmUgaW4gZHRzKVxyXG4gIHdpbmRvdy5lbGVjdHJvbkFQSSA9IGVsZWN0cm9uQVBJXHJcbn1cclxuXHJcbi8vIEV4cG9zZSBlbnZpcm9ubWVudCBpbmZvcm1hdGlvblxyXG5jb250ZXh0QnJpZGdlLmV4cG9zZUluTWFpbldvcmxkKCdlbnZpcm9ubWVudCcsIHtcclxuICBpc0VsZWN0cm9uOiB0cnVlLFxyXG4gIGlzRGV2OiBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ2RldmVsb3BtZW50JyxcclxuICBwbGF0Zm9ybTogcHJvY2Vzcy5wbGF0Zm9ybVxyXG59KVxyXG5cclxuLy8gU2VjdXJpdHk6IFJlbW92ZSBhY2Nlc3MgdG8gTm9kZS5qcyBBUElzXHJcbmRlbGV0ZSAod2luZG93IGFzIGFueSkucmVxdWlyZVxyXG5kZWxldGUgKHdpbmRvdyBhcyBhbnkpLmV4cG9ydHNcclxuZGVsZXRlICh3aW5kb3cgYXMgYW55KS5tb2R1bGUiXSwibmFtZXMiOlsiaXBjUmVuZGVyZXIiLCJjb250ZXh0QnJpZGdlIl0sIm1hcHBpbmdzIjoiOztBQThCQSxNQUFNLGNBQTJCO0FBQUEsRUFDL0IsS0FBSztBQUFBLElBQ0gsWUFBWSxNQUFNQSxTQUFBQSxZQUFZLE9BQU8sZ0JBQWdCO0FBQUEsSUFDckQsYUFBYSxNQUFNQSxxQkFBWSxPQUFPLGlCQUFpQjtBQUFBLEVBQUE7QUFBQSxFQUd6RCxRQUFRO0FBQUEsSUFDTixnQkFBZ0IsQ0FBQyxZQUFZQSxTQUFBQSxZQUFZLE9BQU8seUJBQXlCLE9BQU87QUFBQSxJQUNoRixnQkFBZ0IsQ0FBQyxZQUFZQSxTQUFBQSxZQUFZLE9BQU8seUJBQXlCLE9BQU87QUFBQSxFQUFBO0FBQUEsRUFHbEYsT0FBTztBQUFBLElBQ0wsY0FBYyxDQUFDLFFBQVFBLFNBQUFBLFlBQVksT0FBTyxzQkFBc0IsR0FBRztBQUFBLElBQ25FLGtCQUFrQixDQUFDLGFBQWFBLFNBQUFBLFlBQVksT0FBTywwQkFBMEIsUUFBUTtBQUFBLEVBQUE7QUFBQSxFQUd2RixjQUFjO0FBQUEsSUFDWixNQUFNLENBQUMsT0FBZSxNQUFjLFlBQWtDO0FBQ3BFLFVBQUksT0FBTyxnQkFBZ0IsYUFBYSxlQUFlLFdBQVc7QUFDaEUsWUFBSSxhQUFhLE9BQU8sRUFBRSxNQUFNLEdBQUcsU0FBUztBQUFBLE1BQzlDLFdBQVcsT0FBTyxnQkFBZ0IsYUFBYSxlQUFlLFVBQVU7QUFDdEUscUJBQWEsa0JBQUEsRUFBb0IsS0FBSyxDQUFBLGVBQWM7QUFDbEQsY0FBSSxlQUFlLFdBQVc7QUFDNUIsZ0JBQUksYUFBYSxPQUFPLEVBQUUsTUFBTSxHQUFHLFNBQVM7QUFBQSxVQUM5QztBQUFBLFFBQ0YsQ0FBQztBQUFBLE1BQ0g7QUFBQSxJQUNGO0FBQUEsRUFBQTtBQUVKO0FBS0EsSUFBSSxRQUFRLGlCQUFpQjtBQUMzQixNQUFJO0FBQ0ZDLDJCQUFjLGtCQUFrQixlQUFlLFdBQVc7QUFBQSxFQUM1RCxTQUFTLE9BQU87QUFDZCxZQUFRLE1BQU0saUNBQWlDLEtBQUs7QUFBQSxFQUN0RDtBQUNGLE9BQU87QUFFTCxTQUFPLGNBQWM7QUFDdkI7QUFHQUEsU0FBQUEsY0FBYyxrQkFBa0IsZUFBZTtBQUFBLEVBQzdDLFlBQVk7QUFBQSxFQUNaLE9BQU8sWUFBWSxhQUFhO0FBQUEsRUFDaEMsVUFBVSxRQUFRO0FBQ3BCLENBQUM7QUFHRCxPQUFRLE9BQWU7QUFDdkIsT0FBUSxPQUFlO0FBQ3ZCLE9BQVEsT0FBZTsifQ==
