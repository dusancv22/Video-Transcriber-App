"use strict";
const electron = require("electron");
const electronAPI = {
  app: {
    getVersion: () => electron.ipcRenderer.invoke("app:getVersion"),
    getPlatform: () => electron.ipcRenderer.invoke("app:getPlatform")
  },
  dialog: {
    showOpenDialog: (options) => electron.ipcRenderer.invoke("dialog:showOpenDialog", options),
    showSaveDialog: (options) => electron.ipcRenderer.invoke("dialog:showSaveDialog", options)
  },
  shell: {
    openExternal: (url) => electron.ipcRenderer.invoke("shell:openExternal", url),
    showItemInFolder: (fullPath) => electron.ipcRenderer.invoke("shell:showItemInFolder", fullPath)
  },
  notification: {
    show: (title, body, options) => {
      if (window.Notification && Notification.permission === "granted") {
        new Notification(title, { body, ...options });
      } else if (window.Notification && Notification.permission !== "denied") {
        Notification.requestPermission().then((permission) => {
          if (permission === "granted") {
            new Notification(title, { body, ...options });
          }
        });
      }
    }
  },
  path: {
    getDefaultOutputDirectory: () => electron.ipcRenderer.invoke("path:getDefaultOutputDirectory"),
    getUserDocumentsPath: () => electron.ipcRenderer.invoke("path:getUserDocumentsPath")
  },
  file: {
    getFilePathsFromDrop: (files) => {
      const fileData = Array.from(files).map((file) => ({
        name: file.name,
        size: file.size,
        type: file.type,
        lastModified: file.lastModified
      }));
      return electron.ipcRenderer.invoke("file:getFilePathsFromDrop", fileData);
    },
    selectVideoFiles: () => electron.ipcRenderer.invoke("file:selectVideoFiles")
  },
  window: {
    close: () => electron.ipcRenderer.invoke("window:close"),
    minimize: () => electron.ipcRenderer.invoke("window:minimize"),
    maximize: () => electron.ipcRenderer.invoke("window:maximize"),
    toggleDevTools: () => electron.ipcRenderer.invoke("window:toggleDevTools")
  },
  system: {
    getMemoryUsage: () => electron.ipcRenderer.invoke("system:getMemoryUsage"),
    getDiskSpace: (path) => electron.ipcRenderer.invoke("system:getDiskSpace", path),
    getCPUInfo: () => electron.ipcRenderer.invoke("system:getCPUInfo")
  },
  backend: {
    healthCheck: () => electron.ipcRenderer.invoke("backend:healthCheck")
  }
};
if (process.contextIsolated) {
  try {
    electron.contextBridge.exposeInMainWorld("electronAPI", electronAPI);
  } catch (error) {
    console.error("Failed to expose electronAPI:", error);
  }
} else {
  window.electronAPI = electronAPI;
}
electron.contextBridge.exposeInMainWorld("environment", {
  isElectron: true,
  isDev: process.env.NODE_ENV === "development",
  platform: process.platform
});
delete window.require;
delete window.exports;
delete window.module;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
