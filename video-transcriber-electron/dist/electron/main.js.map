{"version":3,"file":"main.js","sources":["../../electron/main.ts"],"sourcesContent":["import { app, BrowserWindow, shell, ipcMain, dialog } from 'electron'\r\nimport { join } from 'path'\r\nimport { spawn, ChildProcess } from 'child_process'\r\nimport { platform } from 'os'\r\n\r\n// The built directory structure\r\n//\r\n// ├─┬ dist-electron\r\n// │ ├─┬ main.js    > Electron main process\r\n// │ └─┬ preload.js > Preload scripts\r\n// ├─┬ dist\r\n// │ └── index.html > Electron renderer\r\n//\r\n\r\nconst isWin32 = platform() === 'win32'\r\nconst isDev = process.env.NODE_ENV === 'development'\r\nconst VITE_DEV_SERVER_URL = process.env.VITE_DEV_SERVER_URL\r\n\r\n// Python backend process\r\nlet pythonProcess: ChildProcess | null = null\r\n\r\nclass ElectronApp {\r\n  private mainWindow: BrowserWindow | null = null\r\n\r\n  constructor() {\r\n    this.setupEventHandlers()\r\n  }\r\n\r\n  private setupEventHandlers(): void {\r\n    // This method will be called when Electron has finished initialization\r\n    app.whenReady().then(() => {\r\n      this.createWindow()\r\n      // Skip Python backend startup - handled by start script\r\n      // this.startPythonBackend()\r\n      \r\n      app.on('activate', () => {\r\n        // On macOS it's common to re-create a window when dock icon is clicked\r\n        if (BrowserWindow.getAllWindows().length === 0) this.createWindow()\r\n      })\r\n    })\r\n\r\n    // Quit when all windows are closed, except on macOS\r\n    app.on('window-all-closed', () => {\r\n      if (process.platform !== 'darwin') {\r\n        this.cleanup()\r\n        app.quit()\r\n      }\r\n    })\r\n\r\n    // Handle app termination\r\n    app.on('before-quit', () => {\r\n      this.cleanup()\r\n    })\r\n\r\n    // Security: Prevent new window creation\r\n    app.on('web-contents-created', (_, contents) => {\r\n      contents.on('new-window', (navigationEvent, url) => {\r\n        navigationEvent.preventDefault()\r\n        shell.openExternal(url)\r\n      })\r\n    })\r\n  }\r\n\r\n  private async createWindow(): Promise<void> {\r\n    this.mainWindow = new BrowserWindow({\r\n      title: 'Video Transcriber',\r\n      width: 1200,\r\n      height: 800,\r\n      minWidth: 800,\r\n      minHeight: 600,\r\n      icon: join(process.env.VITE_PUBLIC || '.', 'icon.png'),\r\n      webPreferences: {\r\n        preload: join(__dirname, '../preload/index.js'),\r\n        nodeIntegration: false,\r\n        contextIsolation: true,\r\n        enableRemoteModule: false,\r\n        allowRunningInsecureContent: false,\r\n        experimentalFeatures: false\r\n      },\r\n      show: false, // Don't show until ready-to-show\r\n      titleBarStyle: process.platform === 'darwin' ? 'hiddenInset' : 'default'\r\n    })\r\n\r\n    // Show window when ready to prevent visual flash\r\n    this.mainWindow.once('ready-to-show', () => {\r\n      this.mainWindow?.show()\r\n      \r\n      if (isDev) {\r\n        this.mainWindow?.webContents.openDevTools()\r\n      }\r\n    })\r\n\r\n    // Load the remote URL for development or the local html file for production\r\n    if (VITE_DEV_SERVER_URL) {\r\n      await this.mainWindow.loadURL(VITE_DEV_SERVER_URL)\r\n    } else {\r\n      await this.mainWindow.loadFile(join(__dirname, '../index.html'))\r\n    }\r\n\r\n    // Handle window closed\r\n    this.mainWindow.on('closed', () => {\r\n      this.mainWindow = null\r\n    })\r\n\r\n    // Prevent navigation to external URLs\r\n    this.mainWindow.webContents.on('will-navigate', (event, url) => {\r\n      if (url !== this.mainWindow?.webContents.getURL()) {\r\n        event.preventDefault()\r\n        shell.openExternal(url)\r\n      }\r\n    })\r\n  }\r\n\r\n  private startPythonBackend(): void {\r\n    try {\r\n      const pythonExecutable = isDev ? 'python' : join(process.resourcesPath, 'python-backend', 'python')\r\n      const scriptPath = isDev \r\n        ? join(__dirname, '../../backend/main.py')\r\n        : join(process.resourcesPath, 'python-backend', 'main.py')\r\n\r\n      console.log('Starting Python backend:', pythonExecutable, scriptPath)\r\n\r\n      pythonProcess = spawn(pythonExecutable, [scriptPath], {\r\n        cwd: isDev ? join(__dirname, '../../') : process.resourcesPath,\r\n        stdio: ['pipe', 'pipe', 'pipe'],\r\n        env: {\r\n          ...process.env,\r\n          PYTHONUNBUFFERED: '1'\r\n        }\r\n      })\r\n\r\n      pythonProcess.stdout?.on('data', (data) => {\r\n        console.log('Python backend stdout:', data.toString())\r\n      })\r\n\r\n      pythonProcess.stderr?.on('data', (data) => {\r\n        console.error('Python backend stderr:', data.toString())\r\n      })\r\n\r\n      pythonProcess.on('close', (code) => {\r\n        console.log(`Python backend process exited with code ${code}`)\r\n        pythonProcess = null\r\n      })\r\n\r\n      pythonProcess.on('error', (error) => {\r\n        console.error('Failed to start Python backend:', error)\r\n        this.showErrorDialog('Backend Error', 'Failed to start Python backend. Please check your installation.')\r\n      })\r\n\r\n    } catch (error) {\r\n      console.error('Error starting Python backend:', error)\r\n      this.showErrorDialog('Startup Error', 'Failed to initialize the application backend.')\r\n    }\r\n  }\r\n\r\n  private cleanup(): void {\r\n    if (pythonProcess) {\r\n      console.log('Terminating Python backend process...')\r\n      \r\n      if (isWin32) {\r\n        spawn('taskkill', ['/pid', pythonProcess.pid?.toString() || '', '/f', '/t'])\r\n      } else {\r\n        pythonProcess.kill('SIGTERM')\r\n      }\r\n      \r\n      pythonProcess = null\r\n    }\r\n  }\r\n\r\n  private showErrorDialog(title: string, content: string): void {\r\n    dialog.showErrorBox(title, content)\r\n  }\r\n}\r\n\r\n// Initialize the Electron application\r\nnew ElectronApp()\r\n\r\n// IPC handlers for secure communication with renderer process\r\nipcMain.handle('app:getVersion', () => {\r\n  return app.getVersion()\r\n})\r\n\r\nipcMain.handle('app:getPlatform', () => {\r\n  return process.platform\r\n})\r\n\r\nipcMain.handle('dialog:showOpenDialog', async (_, options) => {\r\n  if (!BrowserWindow.getFocusedWindow()) return { canceled: true }\r\n  \r\n  const result = await dialog.showOpenDialog(BrowserWindow.getFocusedWindow()!, options)\r\n  return result\r\n})\r\n\r\nipcMain.handle('dialog:showSaveDialog', async (_, options) => {\r\n  if (!BrowserWindow.getFocusedWindow()) return { canceled: true }\r\n  \r\n  const result = await dialog.showSaveDialog(BrowserWindow.getFocusedWindow()!, options)\r\n  return result\r\n})\r\n\r\nipcMain.handle('shell:openExternal', async (_, url: string) => {\r\n  await shell.openExternal(url)\r\n})\r\n\r\nipcMain.handle('shell:showItemInFolder', (_, fullPath: string) => {\r\n  shell.showItemInFolder(fullPath)\r\n})\r\n\r\n// Handle app protocol for deep linking (optional)\r\nif (process.defaultApp) {\r\n  if (process.argv.length >= 2) {\r\n    app.setAsDefaultProtocolClient('video-transcriber', process.execPath, [join(__dirname, '../')])\r\n  }\r\n} else {\r\n  app.setAsDefaultProtocolClient('video-transcriber')\r\n}"],"names":["platform","app","BrowserWindow","shell","join","spawn","dialog","ipcMain"],"mappings":";;;;;;;;AAcA,MAAM,UAAUA,GAAAA,eAAe;AAC/B,MAAM,QAAQ,YAAY,aAAa;AACvC,MAAM,sBAAsB,QAAA,IAAY;AAGxC,IAAI,gBAAqC;AAEzC,MAAM,YAAY;AAAA,EAGhB,cAAc;AAFN,sCAAmC;AAGzC,SAAK,mBAAA;AAAA,EACP;AAAA,EAEQ,qBAA2B;AAEjCC,iBAAI,YAAY,KAAK,MAAM;AACzB,WAAK,aAAA;AAILA,mBAAI,GAAG,YAAY,MAAM;AAEvB,YAAIC,SAAAA,cAAc,cAAA,EAAgB,WAAW,QAAQ,aAAA;AAAA,MACvD,CAAC;AAAA,IACH,CAAC;AAGDD,iBAAI,GAAG,qBAAqB,MAAM;AAChC,UAAI,QAAQ,aAAa,UAAU;AACjC,aAAK,QAAA;AACLA,iBAAAA,IAAI,KAAA;AAAA,MACN;AAAA,IACF,CAAC;AAGDA,iBAAI,GAAG,eAAe,MAAM;AAC1B,WAAK,QAAA;AAAA,IACP,CAAC;AAGDA,aAAAA,IAAI,GAAG,wBAAwB,CAAC,GAAG,aAAa;AAC9C,eAAS,GAAG,cAAc,CAAC,iBAAiB,QAAQ;AAClD,wBAAgB,eAAA;AAChBE,iBAAAA,MAAM,aAAa,GAAG;AAAA,MACxB,CAAC;AAAA,IACH,CAAC;AAAA,EACH;AAAA,EAEA,MAAc,eAA8B;AAC1C,SAAK,aAAa,IAAID,uBAAc;AAAA,MAClC,OAAO;AAAA,MACP,OAAO;AAAA,MACP,QAAQ;AAAA,MACR,UAAU;AAAA,MACV,WAAW;AAAA,MACX,MAAME,KAAAA,KAAK,QAAA,IAAY,eAAe,KAAK,UAAU;AAAA,MACrD,gBAAgB;AAAA,QACd,SAASA,KAAAA,KAAK,WAAW,qBAAqB;AAAA,QAC9C,iBAAiB;AAAA,QACjB,kBAAkB;AAAA,QAClB,oBAAoB;AAAA,QACpB,6BAA6B;AAAA,QAC7B,sBAAsB;AAAA,MAAA;AAAA,MAExB,MAAM;AAAA;AAAA,MACN,eAAe,QAAQ,aAAa,WAAW,gBAAgB;AAAA,IAAA,CAChE;AAGD,SAAK,WAAW,KAAK,iBAAiB,MAAM;;AAC1C,iBAAK,eAAL,mBAAiB;AAEjB,UAAI,OAAO;AACT,mBAAK,eAAL,mBAAiB,YAAY;AAAA,MAC/B;AAAA,IACF,CAAC;AAGD,QAAI,qBAAqB;AACvB,YAAM,KAAK,WAAW,QAAQ,mBAAmB;AAAA,IACnD,OAAO;AACL,YAAM,KAAK,WAAW,SAASA,KAAAA,KAAK,WAAW,eAAe,CAAC;AAAA,IACjE;AAGA,SAAK,WAAW,GAAG,UAAU,MAAM;AACjC,WAAK,aAAa;AAAA,IACpB,CAAC;AAGD,SAAK,WAAW,YAAY,GAAG,iBAAiB,CAAC,OAAO,QAAQ;;AAC9D,UAAI,UAAQ,UAAK,eAAL,mBAAiB,YAAY,WAAU;AACjD,cAAM,eAAA;AACND,iBAAAA,MAAM,aAAa,GAAG;AAAA,MACxB;AAAA,IACF,CAAC;AAAA,EACH;AAAA,EAEQ,qBAA2B;;AACjC,QAAI;AACF,YAAM,mBAAmB,QAAQ,WAAWC,KAAAA,KAAK,QAAQ,eAAe,kBAAkB,QAAQ;AAClG,YAAM,aAAa,QACfA,KAAAA,KAAK,WAAW,uBAAuB,IACvCA,KAAAA,KAAK,QAAQ,eAAe,kBAAkB,SAAS;AAE3D,cAAQ,IAAI,4BAA4B,kBAAkB,UAAU;AAEpE,sBAAgBC,cAAAA,MAAM,kBAAkB,CAAC,UAAU,GAAG;AAAA,QACpD,KAAK,QAAQD,KAAAA,KAAK,WAAW,QAAQ,IAAI,QAAQ;AAAA,QACjD,OAAO,CAAC,QAAQ,QAAQ,MAAM;AAAA,QAC9B,KAAK;AAAA,UACH,GAAG,QAAA;AAAA,UACH,kBAAkB;AAAA,QAAA;AAAA,MACpB,CACD;AAED,0BAAc,WAAd,mBAAsB,GAAG,QAAQ,CAAC,SAAS;AACzC,gBAAQ,IAAI,0BAA0B,KAAK,SAAA,CAAU;AAAA,MACvD;AAEA,0BAAc,WAAd,mBAAsB,GAAG,QAAQ,CAAC,SAAS;AACzC,gBAAQ,MAAM,0BAA0B,KAAK,SAAA,CAAU;AAAA,MACzD;AAEA,oBAAc,GAAG,SAAS,CAAC,SAAS;AAClC,gBAAQ,IAAI,2CAA2C,IAAI,EAAE;AAC7D,wBAAgB;AAAA,MAClB,CAAC;AAED,oBAAc,GAAG,SAAS,CAAC,UAAU;AACnC,gBAAQ,MAAM,mCAAmC,KAAK;AACtD,aAAK,gBAAgB,iBAAiB,iEAAiE;AAAA,MACzG,CAAC;AAAA,IAEH,SAAS,OAAO;AACd,cAAQ,MAAM,kCAAkC,KAAK;AACrD,WAAK,gBAAgB,iBAAiB,+CAA+C;AAAA,IACvF;AAAA,EACF;AAAA,EAEQ,UAAgB;;AACtB,QAAI,eAAe;AACjB,cAAQ,IAAI,uCAAuC;AAEnD,UAAI,SAAS;AACXC,sBAAAA,MAAM,YAAY,CAAC,UAAQ,mBAAc,QAAd,mBAAmB,eAAc,IAAI,MAAM,IAAI,CAAC;AAAA,MAC7E,OAAO;AACL,sBAAc,KAAK,SAAS;AAAA,MAC9B;AAEA,sBAAgB;AAAA,IAClB;AAAA,EACF;AAAA,EAEQ,gBAAgB,OAAe,SAAuB;AAC5DC,oBAAO,aAAa,OAAO,OAAO;AAAA,EACpC;AACF;AAGA,IAAI,YAAA;AAGJC,SAAAA,QAAQ,OAAO,kBAAkB,MAAM;AACrC,SAAON,SAAAA,IAAI,WAAA;AACb,CAAC;AAEDM,SAAAA,QAAQ,OAAO,mBAAmB,MAAM;AACtC,SAAO,QAAQ;AACjB,CAAC;AAEDA,SAAAA,QAAQ,OAAO,yBAAyB,OAAO,GAAG,YAAY;AAC5D,MAAI,CAACL,SAAAA,cAAc,iBAAA,EAAoB,QAAO,EAAE,UAAU,KAAA;AAE1D,QAAM,SAAS,MAAMI,gBAAO,eAAeJ,SAAAA,cAAc,iBAAA,GAAqB,OAAO;AACrF,SAAO;AACT,CAAC;AAEDK,SAAAA,QAAQ,OAAO,yBAAyB,OAAO,GAAG,YAAY;AAC5D,MAAI,CAACL,SAAAA,cAAc,iBAAA,EAAoB,QAAO,EAAE,UAAU,KAAA;AAE1D,QAAM,SAAS,MAAMI,gBAAO,eAAeJ,SAAAA,cAAc,iBAAA,GAAqB,OAAO;AACrF,SAAO;AACT,CAAC;AAEDK,SAAAA,QAAQ,OAAO,sBAAsB,OAAO,GAAG,QAAgB;AAC7D,QAAMJ,SAAAA,MAAM,aAAa,GAAG;AAC9B,CAAC;AAEDI,SAAAA,QAAQ,OAAO,0BAA0B,CAAC,GAAG,aAAqB;AAChEJ,WAAAA,MAAM,iBAAiB,QAAQ;AACjC,CAAC;AAGD,IAAI,QAAQ,YAAY;AACtB,MAAI,QAAQ,KAAK,UAAU,GAAG;AAC5BF,iBAAI,2BAA2B,qBAAqB,QAAQ,UAAU,CAACG,UAAK,WAAW,KAAK,CAAC,CAAC;AAAA,EAChG;AACF,OAAO;AACLH,WAAAA,IAAI,2BAA2B,mBAAmB;AACpD;"}